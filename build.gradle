// Top-level build file where you can add configuration options common to all sub-projects/modules.
buildscript {
    dependencies {
        classpath Tools.gradle
        classpath Tools.kotlin_gradle_plugin
        classpath Tools.navigation_safe_args_gradle_plugin
        classpath Tools.artifactory
        classpath Tools.google_services
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
    repositories {
        google()
        mavenCentral()
    }
}

apply plugin: 'DependencyExport'

allprojects {
    apply plugin: 'maven-publish'
    apply plugin: "com.jfrog.artifactory"
    repositories {
        maven {
            def machineIP = System.getenv('ARTIFACTORY_MACHINE_IP')
            def port = System.getenv('ARTIFACTORY_PORT') ?: "8081"
            def urlPath = System.getenv('ARTIFACTORY_PATH') ?: "artifactory/libs-release-local"
            def scheme = System.getenv('ARTIFACTORY_SCHEME') ?: "http"
            url "${scheme}://${machineIP}:${port}/${urlPath}"
            credentials {
                username = System.getenv('ARTIFACTORY_USERNAME')
                password = System.getenv('ARTIFACTORY_PASSWORD')
            }
            allowInsecureProtocol true
        }
        google()
        mavenCentral()
    }
}

ext {
    def ARTIFACT_BRANCH = System.getenv('ARTIFACTORY_BRANCH')
    if (ARTIFACT_BRANCH == null)
        ARTIFACT_BRANCH = "main"
    QMobileAPI = QMobileLibs.qmobileapi + '-' + ARTIFACT_BRANCH
    QMobileDataStore = QMobileLibs.qmobiledatastore + '-' + ARTIFACT_BRANCH
    QMobileDataSync = QMobileLibs.qmobiledatasync + '-' + ARTIFACT_BRANCH
    QMobileUI = QMobileLibs.qmobileui + '-' + ARTIFACT_BRANCH
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

configurations {
    implementation
    alt
    kapt
    annotationProcessor
    testImplementation
    androidTestImplementation
}

dependencies {

    // QMobile libraries
//    implementation(QMobileAPI) { changing = true }
//    implementation(QMobileDataStore) {changing = true }
//    implementation(QMobileDataSync) { changing = true }
//    implementation(QMobileUI) { changing = true }
//    implementation project(path: ':qmobileapi', configuration: 'default')
//    implementation project(path: ':qmobiledatastore', configuration: 'default')
//    implementation project(path: ':qmobiledatasync', configuration: 'default')
//    implementation project(path: ':qmobileui', configuration: 'default')


    // Room
    //    kapt Libs.sqlite_jdbc
    implementation Libs.androidx_room
    implementation Libs.androidx_room_runtime
    kapt (Libs.androidx_room_compiler) {
        attributes {
            attribute(Bundling.BUNDLING_ATTRIBUTE, objects.named(Bundling.class, Bundling.EXTERNAL))
//            attribute(Usage.USAGE_ATTRIBUTE, objects.named(Usage.class, Usage.JAVA_RUNTIME))
//            attribute(Category.CATEGORY_ATTRIBUTE, objects.named(Category.class, Category.LIBRARY))
        }
    }

    implementation Libs.room_paging

    // Navigation
    implementation Libs.androidx_navigation_fragment

    // Glide
    implementation Libs.glide
    kapt Libs.glide_compiler

    // Jackson
    implementation Libs.jackson

    // Utils
    implementation Libs.material
    implementation Libs.multidex
    implementation Libs.timber

    // Testing
    testImplementation Libs.junit
    androidTestImplementation Libs.androidx_junit
    androidTestImplementation Libs.androidx_espresso

    implementation (Tools.kotlin_gradle_plugin) {
        attributes {
            attribute(Category.CATEGORY_ATTRIBUTE, objects.named(Category.class, Category.LIBRARY))
        }
    }

    alt("com.fasterxml.jackson.module:jackson-module-kotlin") {
        version {
            strictly("2.11.1")
        }
    }
    implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-xml:2.11.1"
    implementation "org.apache.httpcomponents:httpcore:4.4.11"
    implementation "org.apache.httpcomponents:httpclient:4.5.9"
    implementation "commons-io:commons-io:2.4"
    implementation "org.apache.commons:commons-compress:1.20"

    // buildSrc dependencies
    implementation "org.xerial:sqlite-jdbc:3.36.0.3"
    implementation "org.jetbrains.kotlin:kotlin-scripting-jvm:1.7.10"
    implementation "org.jetbrains.kotlin:kotlin-reflect:1.7.10"
}

mavenDependencyExport {
    exportDir = file('dependencies')
    exportSources = false
    exportJavadoc = false
    configuration 'implementation'
    configuration 'alt'
    configuration 'kapt'
    configuration 'testImplementation'
    configuration 'androidTestImplementation'
    configuration buildscript.configurations.classpath
}

subprojects {
    afterEvaluate { project ->
        if (project.hasProperty('android')) {
            android {
                compileSdkVersion Config.compileSdk
                buildToolsVersion Config.buildTools

                defaultConfig {
                    minSdkVersion Config.minSdk
                    targetSdkVersion Config.targetSdk
                    versionCode 1
                    versionName "1.0"
                    testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
                    vectorDrawables.useSupportLibrary = true
                }

                buildTypes {

                    release {
                        // Enables code shrinking, obfuscation, and optimization for only
                        // your project's release build type.
//                        minifyEnabled true

                        // Enables resource shrinking, which is performed by the
                        // Android Gradle plugin.
//                        shrinkResources true

                        // Includes the default ProGuard rules files that are packaged with
                        // the Android Gradle plugin. To learn more, go to the section about
                        // R8 configuration files.
                        proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
                    }
                }
                configurations.all {
                    // Check for updates every build
                    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
                }
                testOptions {
                    unitTests.includeAndroidResources = true
                }
                packagingOptions {
                    exclude 'META-INF/atomicfu.kotlin_module'
                }
                buildFeatures {
                    dataBinding true
                    viewBinding true
                }
                lintOptions {
                    warning 'InvalidPackage'
                    abortOnError false
                }
            }
        }
    }
}